// This stub file contains examples of some libraries that probably shouldn't have constants
// passed to them, from the JDK.

package java.security;

import org.checkerframework.checker.noliteral.qual.*;

class KeyStore {
    // TODO: add other KeyStore methods?
    void load(@MaybeConstant InputStream stream, @NonConstant char[] password);
    void store(@MaybeConstant OutputStream stream, @NonConstant char[] password);
}

class SecureRandom {
    SecureRandom(@NonConstant byte[] seed);
    void setSeed(@NonConstant byte[] seed);
    void setSeed(@NonConstant long seed);
}

package javax.crypto.spec;

class PBEKeySpec {
    PBEKeySpec(@NonConstant char[] password);
    PBEKeySpec(@NonConstant char[] password, @NonConstant byte[] salt, @MaybeConstant int iterationCount);
    PBEKeySpec(@NonConstant char[] password, @NonConstant byte[] salt, @MaybeConstant int iterationCount, @MaybeConstant int keyLength);
}

class PBEParameterSpec {
    PBEParameterSpec(@NonConstant byte[] salt, @MaybeConstant int iterationCount);
    PBEParameterSpec(@NonConstant byte[] salt, @MaybeConstant int iterationCount, @MaybeConstant AlgorithmParameterSpec paramSpec);
}

class IvParameterSpec {
    IvParameterSpec(@NonConstant byte[] iv);
    IvParameterSpec(@NonConstant byte[] iv, @MaybeConstant int offset, @MaybeConstant int len);
}

class SecretKeySpec {
    SecretKeySpec(@NonConstant byte[] key, @MaybeConstant String algorithm);
    SecretKeySpec(@NonConstant byte[] key, @MaybeConstant int offset, @MaybeConstant int len, @MaybeConstant String algorithm);
}
